# -*- coding: utf-8 -*-
"""ุงูููู ุงูุฑุฆูุณู ูุชุดุบูู ุจูุช ุชููุฌุฑุงู ุงููุฏุนูู ุจุงูุฐูุงุก ุงูุงุตุทูุงุนู"""

import logging
import subprocess
import sys
import shlex
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    ConversationHandler,
)
from telegram.constants import ParseMode

# ุงุณุชูุฑุงุฏ ุงููุญุฏุงุช ูุงูุฅุนุฏุงุฏุงุช ุงููุญููุฉ
import config
import db_handler
import ai_handler
from utils import admin_required, format_api_list, format_admin_list

# ุฅุนุฏุงุฏ ุงูุชุณุฌูู
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logging.getLogger("httpx").setLevel(logging.WARNING) # ุชูููู ุชุณุฌููุงุช ููุชุจุฉ httpx
logger = logging.getLogger(__name__)

# ุชุนุฑูู ุญุงูุงุช ุงููุญุงุฏุซุฉ (ุฅุฐุง ุงุญุชุฌูุง ุฅูููุง ูุงุญูุงู)
# SELECT_API, GET_PROMPT = range(2)

# --- ูุนุงูุฌุงุช ุฃูุงูุฑ ุงููุณุชุฎุฏููู ุงูุนุงุฏููู ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ุฅุฑุณุงู ุฑุณุงูุฉ ุชุฑุญูุจ ุนูุฏ ุฅุฑุณุงู ุงููุณุชุฎุฏู ูุฃูุฑ /start"""
    user = update.effective_user
    logger.info(f"ุงููุณุชุฎุฏู {user.id} ({user.username}) ุจุฏุฃ ุงูุจูุช.")
    welcome_message = (
        f"ุฃููุงู ุจู ูุง {user.mention_html()} ูู ุจูุช ุงูุฐูุงุก ุงูุงุตุทูุงุนู!\n\n"
        "ููููู ุงุณุชุฎุฏุงูู ููุชุญุฏุซ ูุน ููุงุฐุฌ ุงูุฐูุงุก ุงูุงุตุทูุงุนู ุงููุฎุชููุฉ.\n"
        "ุงุณุชุฎุฏู ุงูุฃูุงูุฑ ุงูุชุงููุฉ:\n"
        "/help - ูุนุฑุถ ูุงุฆูุฉ ุงููุณุงุนุฏุฉ ูุงูุฃูุงูุฑ ุงููุชุงุญุฉ\n"
        "/list_apis - ูุนุฑุถ ูุงุฆูุฉ ููุงุฐุฌ ุงูุฐูุงุก ุงูุงุตุทูุงุนู ุงููุชุงุญุฉ\n"
        "/ask `ุงุณู_ุงููููุฐุฌ` `ุณุคุงูู` - ูุทุฑุญ ุณุคุงู ุนูู ูููุฐุฌ ูุญุฏุฏ\n\n"
        "ูุซุงู: `/ask gemini ูุง ูู ุนุงุตูุฉ ูุฑูุณุงุ`"
    )
    await update.message.reply_html(welcome_message)

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ุฅุฑุณุงู ุฑุณุงูุฉ ุงููุณุงุนุฏุฉ ุนูุฏ ุฅุฑุณุงู ุงููุณุชุฎุฏู ูุฃูุฑ /help"""
    user_id = update.effective_user.id
    logger.info(f"ุงููุณุชุฎุฏู {user_id} ุทูุจ ุงููุณุงุนุฏุฉ.")
    
    # ุฑุณุงูุฉ ุงููุณุงุนุฏุฉ ุงูุฃุณุงุณูุฉ
    help_text = (
        "*ุงูุฃูุงูุฑ ุงููุชุงุญุฉ ูููุณุชุฎุฏููู:*\n"
        "/start - ุจุฏุก ุงุณุชุฎุฏุงู ุงูุจูุช\n"
        "/help - ุนุฑุถ ูุฐู ุงูุฑุณุงูุฉ\n"
        "/list_apis - ุนุฑุถ ูุงุฆูุฉ ููุงุฐุฌ ุงูุฐูุงุก ุงูุงุตุทูุงุนู ุงููุชุงุญุฉ\n"
        "/ask `ุงุณู_ุงููููุฐุฌ` `ุณุคุงูู` - ุทุฑุญ ุณุคุงู ุนูู ูููุฐุฌ ูุญุฏุฏ\n"
        "    *ูุซุงู:* `/ask chatgpt ุงูุชุจ ูุตุฉ ูุตูุฑุฉ`\n\n"
    )

    # ุฅุถุงูุฉ ุฃูุงูุฑ ุงููุณุคูููู ุฅุฐุง ูุงู ุงููุณุชุฎุฏู ูุณุคููุงู
    if db_handler.is_admin(user_id):
        help_text += (
            "*ุงูุฃูุงูุฑ ุงููุชุงุญุฉ ูููุณุคูููู:*\n"
            "/add_admin `user_id` - ุฅุถุงูุฉ ูุณุคูู ุฌุฏูุฏ\n"
            "/remove_admin `user_id` - ุฅุฒุงูุฉ ูุณุคูู\n"
            "/list_admins - ุนุฑุถ ูุงุฆูุฉ ุงููุณุคูููู\n"
            "/add_api `name` `key` `type` - ุฅุถุงูุฉ ุฃู ุชุญุฏูุซ ููุชุงุญ API (ุงูููุน: gemini ุฃู chatgpt)\n"
            "/remove_api `name` - ุฅุฒุงูุฉ ููุชุงุญ API\n"
            "/update_bot - ุชุญุฏูุซ ุงูุจูุช ูู GitHub ูุฅุนุงุฏุฉ ุชุดุบููู (ูุชุทูุจ ุฅุนุฏุงุฏ systemd)\n"
        )

    await update.message.reply_text(help_text, parse_mode=ParseMode.MARKDOWN)

async def list_apis_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ุนุฑุถ ูุงุฆูุฉ ุจููุงุฐุฌ ุงูุฐูุงุก ุงูุงุตุทูุงุนู ุงููุชุงุญุฉ"""
    logger.info(f"ุงููุณุชุฎุฏู {update.effective_user.id} ุทูุจ ูุงุฆูุฉ ุงูู APIs.")
    api_keys = db_handler.list_api_keys()
    message = format_api_list(api_keys)
    await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)

async def ask_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ูุนุงูุฌุฉ ุฃูุฑ /ask ูุทุฑุญ ุณุคุงู ุนูู ูููุฐุฌ ูุญุฏุฏ"""
    user_id = update.effective_user.id
    args = context.args
    logger.info(f"ุงููุณุชุฎุฏู {user_id} ุงุณุชุฎุฏู ุฃูุฑ /ask ุจุงููุณุงุฆุท: {args}")

    if len(args) < 2:
        await update.message.reply_text(
            "ุงูุฑุฌุงุก ุงุณุชุฎุฏุงู ุงูุชูุณูู ุงูุตุญูุญ: `/ask ุงุณู_ุงููููุฐุฌ ุณุคุงูู`\n"
            "ูุซุงู: `/ask gemini ูุง ูู ุนุงุตูุฉ ูุฑูุณุงุ`\n"
            "ุงุณุชุฎุฏู /list_apis ููุนุฑูุฉ ุงูุฃุณูุงุก ุงููุชุงุญุฉ."
        )
        return

    api_name = args[0]
    prompt = " ".join(args[1:])

    # ุงูุชุญูู ูู ูุฌูุฏ ุงูู API ุงููุทููุจ
    available_apis = [key_info["name"] for key_info in db_handler.list_api_keys()]
    if api_name not in available_apis:
        await update.message.reply_text(
            f"ุนุฐุฑุงูุ ูู ูุชู ุงูุนุซูุฑ ุนูู ูููุฐุฌ ุจุงูุงุณู `{api_name}`.\n"
            f"ุงูููุงุฐุฌ ุงููุชุงุญุฉ ุญุงููุงู: {', '.join(available_apis) if available_apis else 'ูุง ููุฌุฏ'}.\n"
            "ุงุณุชุฎุฏู /list_apis ููุชุฃูุฏ ูู ุงูุงุณู.",
            parse_mode=ParseMode.MARKDOWN
        )
        return

    # ุฅุฑุณุงู ุฑุณุงูุฉ ุงูุชุธุงุฑ
    thinking_message = await update.message.reply_text(f"ุฌุงุฑู ุงูุชูููุฑ ุจุงุณุชุฎุฏุงู {api_name}... ๐ค")

    # ุงุณุชุฏุนุงุก ุฏุงูุฉ ุงูุฐูุงุก ุงูุงุตุทูุงุนู
    response = ai_handler.get_ai_response(api_name, prompt)

    # ุชุนุฏูู ุฑุณุงูุฉ ุงูุงูุชุธุงุฑ ุจุงูุฑุฏ ุฃู ุฑุณุงูุฉ ุงูุฎุทุฃ
    await context.bot.edit_message_text(
        chat_id=update.effective_chat.id,
        message_id=thinking_message.message_id,
        text=response
    )
    logger.info(f"ุชู ุฅุฑุณุงู ุงูุฑุฏ ูููุณุชุฎุฏู {user_id} ูู {api_name}.")

# --- ูุนุงูุฌุงุช ุฃูุงูุฑ ุงููุณุคูููู ---

@admin_required
async def add_admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ุฅุถุงูุฉ ูุณุคูู ุฌุฏูุฏ (ูููุณุคูููู ููุท)"""
    if not context.args or len(context.args) != 1:
        await update.message.reply_text("ุงูุงุณุชุฎุฏุงู: `/add_admin user_id`")
        return

    try:
        new_admin_id = int(context.args[0])
        success, message = db_handler.add_admin(new_admin_id)
        await update.message.reply_text(message)
    except ValueError:
        await update.message.reply_text("ุฎุทุฃ: ูุนุฑู ุงููุณุชุฎุฏู ูุฌุจ ุฃู ูููู ุฑููุงู.")
    except Exception as e:
        logger.error(f"ุฎุทุฃ ุบูุฑ ูุชููุน ูู add_admin_command: {e}")
        await update.message.reply_text(f"ุญุฏุซ ุฎุทุฃ ุบูุฑ ูุชููุน: {e}")

@admin_required
async def remove_admin_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ุฅุฒุงูุฉ ูุณุคูู (ูููุณุคูููู ููุท)"""
    if not context.args or len(context.args) != 1:
        await update.message.reply_text("ุงูุงุณุชุฎุฏุงู: `/remove_admin user_id`")
        return

    try:
        admin_to_remove = int(context.args[0])
        success, message = db_handler.remove_admin(admin_to_remove)
        await update.message.reply_text(message)
    except ValueError:
        await update.message.reply_text("ุฎุทุฃ: ูุนุฑู ุงููุณุชุฎุฏู ูุฌุจ ุฃู ูููู ุฑููุงู.")
    except Exception as e:
        logger.error(f"ุฎุทุฃ ุบูุฑ ูุชููุน ูู remove_admin_command: {e}")
        await update.message.reply_text(f"ุญุฏุซ ุฎุทุฃ ุบูุฑ ูุชููุน: {e}")

@admin_required
async def list_admins_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ุนุฑุถ ูุงุฆูุฉ ุงููุณุคูููู (ูููุณุคูููู ููุท)"""
    admin_ids = db_handler.list_admins()
    message = format_admin_list(admin_ids)
    await update.message.reply_text(message, parse_mode=ParseMode.MARKDOWN)

@admin_required
async def add_api_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ุฅุถุงูุฉ ุฃู ุชุญุฏูุซ ููุชุงุญ API (ูููุณุคูููู ููุท)"""
    args = context.args
    if len(args) != 3:
        await update.message.reply_text("ุงูุงุณุชุฎุฏุงู: `/add_api name key type` (ุงูููุน: gemini ุฃู chatgpt)")
        return

    name, key, api_type = args
    api_type = api_type.lower()

    if api_type not in ["gemini", "chatgpt"]:
        await update.message.reply_text("ุฎุทุฃ: ุงูููุน ูุฌุจ ุฃู ูููู `gemini` ุฃู `chatgpt`.")
        return

    success, message = db_handler.add_api_key(name, key, api_type)
    await update.message.reply_text(message)

@admin_required
async def remove_api_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ุฅุฒุงูุฉ ููุชุงุญ API (ูููุณุคูููู ููุท)"""
    if not context.args or len(context.args) != 1:
        await update.message.reply_text("ุงูุงุณุชุฎุฏุงู: `/remove_api name`")
        return

    name = context.args[0]
    success, message = db_handler.remove_api_key(name)
    await update.message.reply_text(message)

@admin_required
async def update_bot_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ุชุญุฏูุซ ุงูุจูุช ูู GitHub ูุฅุนุงุฏุฉ ุชุดุบููู (ูููุณุคูููู ููุท)"""
    user_id = update.effective_user.id
    logger.info(f"ุงููุณุคูู {user_id} ุทูุจ ุชุญุฏูุซ ุงูุจูุช.")
    await update.message.reply_text("โณ ุฌุงุฑู ุชุญุฏูุซ ุงูุจูุช ูู GitHub ูุฅุนุงุฏุฉ ุชุดุบููู...")

    script_path = os.path.join(config.PROJECT_PATH, "update.sh")
    if not os.path.exists(script_path):
         # ูุญุงููุฉ ุฅูุดุงุก ุณูุฑูุจุช ุงูุชุญุฏูุซ ุฅุฐุง ูู ููู ููุฌูุฏุงู
        logger.warning(f"ุณูุฑูุจุช ุงูุชุญุฏูุซ {script_path} ุบูุฑ ููุฌูุฏ. ูุญุงููุฉ ุฅูุดุงุฆู.")
        update_script_content = f"""#!/bin/bash
cd "{config.PROJECT_PATH}" || exit 1

echo "Pulling latest changes from GitHub..."
git pull origin main # ุฃู ุงุณู ุงููุฑุน ุงูุฑุฆูุณู ูุฏูู

echo "Installing/updating requirements..."
source venv/bin/activate
pip install -r requirements.txt

echo "Restarting bot service (using systemd)..."
sudo systemctl restart telegram_ai_bot.service # ุชุฃูุฏ ูู ุฃู ุงุณู ุงูุฎุฏูุฉ ุตุญูุญ

echo "Update process finished."
"""
        try:
            with open(script_path, "w") as f:
                f.write(update_script_content)
            os.chmod(script_path, 0o755) # ุฌุนู ุงูุณูุฑูุจุช ูุงุจูุงู ููุชูููุฐ
            logger.info(f"ุชู ุฅูุดุงุก ุณูุฑูุจุช ุงูุชุญุฏูุซ ุจูุฌุงุญ: {script_path}")
            await update.message.reply_text("ุชู ุฅูุดุงุก ุณูุฑูุจุช ุงูุชุญุฏูุซ. ูุฑุฌู ุงูุชุฃูุฏ ูู ุงุณู ุงูุฎุฏูุฉ ูู ุงูุณูุฑูุจุช (`telegram_ai_bot.service`) ุซู ุชุดุบูู ุงูุฃูุฑ /update_bot ูุฑุฉ ุฃุฎุฑู.")
            return
        except Exception as e:
            logger.error(f"ูุดู ุฅูุดุงุก ุณูุฑูุจุช ุงูุชุญุฏูุซ: {e}")
            await update.message.reply_text(f"ูุดู ุฅูุดุงุก ุณูุฑูุจุช ุงูุชุญุฏูุซ: {e}. ูุฑุฌู ุฅูุดุงุฆู ูุฏููุงู.")
            return

    try:
        # ุชูููุฐ ุณูุฑูุจุช ุงูุชุญุฏูุซ
        logger.info(f"ุชูููุฐ ุณูุฑูุจุช ุงูุชุญุฏูุซ: {script_path}")
        # ุงุณุชุฎุฏุงู shlex.split ูุชูุณูู ุงูุฃูุฑ ุจุดูู ุขูู
        process = subprocess.Popen(shlex.split(f"sudo bash {script_path}"), stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        stdout, stderr = process.communicate()

        output_message = "โ ุชู ุงูุงูุชูุงุก ูู ุนูููุฉ ุงูุชุญุฏูุซ.\n\n"
        if stdout:
            output_message += f"*ุงููุฎุฑุฌุงุช ุงูููุงุณูุฉ:*\n```\n{stdout[-1000:]}```\n\n" # ุนุฑุถ ุขุฎุฑ 1000 ุญุฑู
        if stderr:
            output_message += f"*ุฃุฎุทุงุก ููุงุณูุฉ:*\n```\n{stderr[-1000:]}```\n"
        if not stdout and not stderr:
             output_message += "(ูุง ุชูุฌุฏ ูุฎุฑุฌุงุช ูู ุงูุณูุฑูุจุช)"

        logger.info(f"ูุฎุฑุฌุงุช ุณูุฑูุจุช ุงูุชุญุฏูุซ:\nStdout: {stdout}\nStderr: {stderr}")
        # ูุฏ ูุง ุชุตู ูุฐู ุงูุฑุณุงูุฉ ุฅุฐุง ุชูุช ุฅุนุงุฏุฉ ุชุดุบูู ุงูุจูุช ุจูุฌุงุญ
        await update.message.reply_text(output_message, parse_mode=ParseMode.MARKDOWN)

    except FileNotFoundError:
        logger.error(f"ุฎุทุฃ: ุณูุฑูุจุช ุงูุชุญุฏูุซ {script_path} ุบูุฑ ููุฌูุฏ.")
        await update.message.reply_text(f"ุฎุทุฃ: ุณูุฑูุจุช ุงูุชุญุฏูุซ {script_path} ุบูุฑ ููุฌูุฏ. ูุฑุฌู ุงูุชุฃูุฏ ูู ุงููุณุงุฑ ูุงูุฅุนุฏุงุฏุงุช.")
    except Exception as e:
        logger.error(f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชูููุฐ ุณูุฑูุจุช ุงูุชุญุฏูุซ: {e}")
        await update.message.reply_text(f"ุญุฏุซ ุฎุทุฃ ุฃุซูุงุก ุชูููุฐ ุณูุฑูุจุช ุงูุชุญุฏูุซ: {e}")

# --- ูุนุงูุฌ ุงูุฃุฎุทุงุก ---

async def error_handler(update: object, context: ContextTypes.DEFAULT_TYPE) -> None:
    """ุชุณุฌูู ุงูุฃุฎุทุงุก ุงูุชู ุชุณุจุจูุง ุชุญุฏูุซุงุช PTB"""
    logger.error("ุญุฏุซ ุงุณุชุซูุงุก ุฃุซูุงุก ูุนุงูุฌุฉ ุชุญุฏูุซ:", exc_info=context.error)
    # ููููู ุฅุถุงูุฉ ุฅุดุนุงุฑ ูููุทูุฑ ููุง ุฅุฐุง ุฃุฑุฏุช
    # traceback.print_exception(type(context.error), context.error, context.error.__traceback__)

# --- ุงูุฅุนุฏุงุฏ ูุงูุชุดุบูู ---

if __name__ == "__main__":
    logger.info("ุจุฏุก ุชุดุบูู ุงูุจูุช...")

    # ุงูุชุญูู ูู ูุฌูุฏ ุฑูุฒ ุงูุจูุช
    if not config.TELEGRAM_TOKEN:
        logger.critical("ุฎุทุฃ ูุงุฏุญ: ุฑูุฒ ุจูุช ุชููุฌุฑุงู (TELEGRAM_TOKEN) ุบูุฑ ููุฌูุฏ ูู ุงูุฅุนุฏุงุฏุงุช ุฃู ูุชุบูุฑุงุช ุงูุจูุฆุฉ. ูุง ูููู ุชุดุบูู ุงูุจูุช.")
        sys.exit(1) # ุงูุฎุฑูุฌ ูู ุงูุจุฑูุงูุฌ

    # ุชููุฆุฉ ูุงุนุฏุฉ ุงูุจูุงูุงุช (ุชุชู ุฃูุถุงู ุนูุฏ ุงุณุชูุฑุงุฏ db_handler)
    # db_handler.initialize_database() # ุชุฃูุฏ ูู ุฃููุง ุชุนูู ุจุดูู ุตุญูุญ
    logger.info("ุชู ุงูุชุญูู ูู ุชููุฆุฉ ูุงุนุฏุฉ ุงูุจูุงูุงุช.")

    # ุฅูุดุงุก ูุงุฆู ุงูุชุทุจูู
    application = Application.builder().token(config.TELEGRAM_TOKEN).build()

    # ุชุณุฌูู ูุนุงูุฌุงุช ุงูุฃูุงูุฑ
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("help", help_command))
    application.add_handler(CommandHandler("list_apis", list_apis_command))
    application.add_handler(CommandHandler("ask", ask_command))

    # ุชุณุฌูู ูุนุงูุฌุงุช ุฃูุงูุฑ ุงููุณุคูููู
    application.add_handler(CommandHandler("add_admin", add_admin_command))
    application.add_handler(CommandHandler("remove_admin", remove_admin_command))
    application.add_handler(CommandHandler("list_admins", list_admins_command))
    application.add_handler(CommandHandler("add_api", add_api_command))
    application.add_handler(CommandHandler("remove_api", remove_api_command))
    application.add_handler(CommandHandler("update_bot", update_bot_command))

    # ุชุณุฌูู ูุนุงูุฌ ุงูุฃุฎุทุงุก
    application.add_error_handler(error_handler)

    # ุชุดุบูู ุงูุจูุช
    logger.info("ุงูุจูุช ุฌุงูุฒ ููุนูู...")
    application.run_polling()

