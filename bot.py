#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
ููู ุงูุจูุช ุงูุฑุฆูุณู
ูุญุชูู ุนูู ููุทุฉ ุงูุจุฏุงูุฉ ูุฅุนุฏุงุฏ ุงูุจูุช ูุชุณุฌูู ุงูุฃูุงูุฑ
"""

import logging
import os
import sys
from datetime import datetime, timedelta
import asyncio
import uuid

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, ContextTypes, filters
from telegram.constants import ParseMode

# ุงุณุชูุฑุงุฏ ุงููุญุฏุงุช ุงูุฎุงุตุฉ ุจุงูุจูุช
from config import TOKEN, ADMIN_ID, SUPPORTED_MODELS, DEFAULT_API_KEYS
from database import Database

# ุฅุนุฏุงุฏ ุงูุชุณุฌูู
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# ุฅูุดุงุก ูุงุนุฏุฉ ุงูุจูุงูุงุช
db = Database()

# ุฅุถุงูุฉ ุงููุณุคูู ุงูุฑุฆูุณู
def setup_admin():
    """ุฅุนุฏุงุฏ ุงููุณุคูู ุงูุฑุฆูุณู"""
    if not db.is_admin(ADMIN_ID):
        db.add_admin(ADMIN_ID, "system")
        logger.info(f"ุชู ุฅุถุงูุฉ ุงููุณุคูู ุงูุฑุฆูุณู: {ADMIN_ID}")

# ุฅุถุงูุฉ ููุงุชูุญ API ุงูุงูุชุฑุงุถูุฉ
def setup_default_api_keys():
    """ุฅุนุฏุงุฏ ููุงุชูุญ API ุงูุงูุชุฑุงุถูุฉ"""
    for model, key in DEFAULT_API_KEYS.items():
        if not db.get_api_key(model):
            db.add_api_key(model, key, "system")
            logger.info(f"ุชู ุฅุถุงูุฉ ููุชุงุญ API ุงูุงูุชุฑุงุถู ููููุฐุฌ: {model}")

# ูุธุงุฆู ูุณุงุนุฏุฉ
async def is_admin(user_id):
    """ุงูุชุญูู ููุง ุฅุฐุง ูุงู ุงููุณุชุฎุฏู ูุณุคููุงู"""
    return user_id == ADMIN_ID or db.is_admin(str(user_id))

async def register_user(update: Update):
    """ุชุณุฌูู ุงููุณุชุฎุฏู ูู ูุงุนุฏุฉ ุงูุจูุงูุงุช"""
    user = update.effective_user
    language_code = user.language_code or 'ar'
    
    # ุงูุชุญูู ูู ุงููุบุฉ ุงููุฏุนููุฉ
    if language_code not in ['ar', 'en', 'ru', 'es', 'fr', 'pt']:
        language_code = 'ar'  # ุงููุบุฉ ุงูุงูุชุฑุงุถูุฉ ูู ุงูุนุฑุจูุฉ
    
    is_new = db.add_user(
        str(user.id),
        user.username,
        user.first_name,
        user.last_name,
        language_code
    )
    
    return is_new

# ุฃูุงูุฑ ุงูุจูุช ุงูุฃุณุงุณูุฉ
async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """ุงูุชุนุงูู ูุน ุฃูุฑ /start"""
    is_new_user = await register_user(update)
    user_id = str(update.effective_user.id)
    
    # ูุต ุงูุชุฑุญูุจ
    welcome_text = """ูุฑุญุจูุง! ูุชูุญ ูู ุงูุฑูุจูุช ุงููุตูู ุฅูู ุฃูุถู ุฃุฏูุงุช ุงูุฐูุงุก ุงูุงุตุทูุงุนู ูุฅูุดุงุก ุงููุตูุต ูุงูุตูุฑ ูุงูููุฏูููุงุช ูุงูููุณููู.

ุฌุฑุจ ููุงุฐุฌ ูุชูุฏูุฉ: OpenAI o3ุ o4-miniุ GPT-4.5ุ Claude 4ุ /Midjourneyุ Fluxุ /Klingุ Pikaุ /Sunoุ Grok ูุงููุฒูุฏ.

ูุฌุงููุง: GPT-4.1 miniุ DeepSeekุ Gemini 2.5ุ GPT Imagesุ ูุจุญุซ ุงูููุจ Perplexity.

ููููุฉ ุงูุงุณุชุฎุฏุงู:

๐ ุงููุต: ููุท ุงุทุฑุญ ุณุคุงูู ูู ุงูุฏุฑุฏุดุฉ (ุงุฎุชุฑ ูููุฐุฌ ุงูุฐูุงุก ุงูุงุตุทูุงุนู ุจุงุณุชุฎุฏุงู /model).

๐ ุงูุจุญุซ: ุงููุฑ ุนูู /s ููุจุญุซ ุงูุฐูู ุนูู ุงูููุจ.

๐ ุงูุตูุฑ: ุงููุฑ ุนูู /photo ูุจุฏุก ุฅูุดุงุก ุงูุตูุฑ ุฃู ุชุญุฑูุฑูุง.

๐ฌ ุงูููุฏูู: ุงููุฑ ุนูู /video ูุจุฏุก ุฅูุดุงุก ููุทุน ุงูููุฏูู ุงูุฎุงุต ุจู (ูุชุงุญ ูู /premium).

๐ธ ุงูููุณููู: ุงููุฑ ุนูู /chirpุ ูุงุฎุชุฑ ููุนูุง ููุณููููุงุ ูุฃุถู ูููุงุช ุงูุฃุบููุฉ (ูุชุงุญ ูู /Suno)."""
    
    # ุฅูุดุงุก ููุญุฉ ุงูููุงุชูุญ
    keyboard = [
        [InlineKeyboardButton("ุญุณุงุจู ๐ค", callback_data="account")],
        [InlineKeyboardButton("ุงูุงุดุชุฑุงู ุงููููุฒ ๐", callback_data="premium")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    await update.message.reply_text(welcome_text, reply_markup=reply_markup, parse_mode=ParseMode.HTML)
    
    # ุฅุฐุง ูุงู ูุณุชุฎุฏู ุฌุฏูุฏุ ูุฑุณู ุฑุณุงูุฉ ุชุฑุญูุจ ุฅุถุงููุฉ
    if is_new_user:
        logger.info(f"ูุณุชุฎุฏู ุฌุฏูุฏ ุชู ุชุณุฌููู: {user_id}")

# ูุธููุฉ ุชุดุบูู ุงูุจูุช
def main():
    """ุชุดุบูู ุงูุจูุช"""
    # ุฅุนุฏุงุฏ ุงููุณุคูู ุงูุฑุฆูุณู ูููุงุชูุญ API ุงูุงูุชุฑุงุถูุฉ
    setup_admin()
    setup_default_api_keys()
    
    # ุฅูุดุงุก ุชุทุจูู ุงูุจูุช
    application = Application.builder().token(TOKEN).build()
    
    # ุฅุถุงูุฉ ูุนุงูุฌุงุช ุงูุฃูุงูุฑ
    application.add_handler(CommandHandler("start", start_command))
    
    # ุจุฏุก ุงูุจูุช
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == "__main__":
    main()
